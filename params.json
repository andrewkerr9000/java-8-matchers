{"name":"java-8-matchers","tagline":"Hamcrest Matchers for Java 8 features","body":"# Installation\r\n\r\nAvailable from the Central Repository. In Maven style:\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>co.unruly</groupId>\r\n  <artifactId>java-8-matchers</artifactId>\r\n  <version>1.1</version>\r\n</dependency>\r\n```\r\n\r\nA test-jar is also available to gain access to a helper for testing the error messages of failing\r\nMatchers.\r\n\r\n```xml\r\n<type>test-jar</type>\r\n```\r\n\r\n# Examples\r\n\r\nBelow are some examples of the java-8-matchers API\r\n\r\n### Optionals\r\n```java\r\n// Contents of Optional\r\nassertThat(Optional.of(\"Hi!\"), OptionalMatchers.contains(\"Hi!\"));\r\n\r\n// Contents of Optional with Matchers\r\nassertThat(Optional.of(4), OptionalMatchers.contains(Matchers.greaterThan(3)));\r\n\r\n// Assert empty\r\nassertThat(Optional.empty(), OptionalMatchers.empty());\r\n```\r\n### Streams\r\n```java\r\n// Stream is empty\r\nassertThat(Stream.empty(), StreamMatchers.empty());\r\n\r\n// Stream contains elements\r\nassertThat(Stream.of(\"a\", \"b\", \"c\"), StreamMatchers.contains(\"a\", \"b\", \"c\"));\r\n\r\n// Stream has only elements matching specified Matcher\r\nassertThat(Stream.of(\"bar\",\"baz\"), StreamMatchers.allMatch(containsString(\"a\")));\r\n\r\n// Stream contains at least one element matching specific Matcher\r\nassertThat(Stream.of(\"foo\", \"bar\", \"baz\", \"waldo\"), StreamMatchers.anyMatch(containsString(\"ald\")));\r\n\r\n// Stream has declared first elements (iterates over whole stream)\r\nassertThat(Stream.of(\"a\",\"b\",\"c\",\"d\",\"e\"), StreamMatchers.startsWith(\"a\", \"b\", \"c\"));\r\n\r\n// Stream has declared first elements (only pull first 10 values)\r\nassertThat(Stream.iterate(0,i -> i + 1), StreamMatchers.startsWith(Stream.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 10));\r\n\r\n// Stream matches all objects within limit\r\nassertThat(Stream.generate(() -> 10), StreamMatchers.startsWithAll(Matchers.equalTo(10), 100));\r\n\r\n// Stream matches at least one object within limit\r\nassertThat(Stream.iterate(0, i -> i + 1), StreamMatchers.startsWithAny(Matchers.equalTo(10), 100));\r\n```\r\n## Time\r\n```java\r\n// Time is before another\r\nassertThat(Instant.parse(\"2014-01-01T00:00:00.00Z\"), TimeMatchers.before(Instant.parse(\"2015-01-01T00:00:00.00Z\")));\r\n\r\n// Time is after another\r\nassertThat(LocalDate.parse(\"2015-01-01\"), TimeMatchers.after(LocalDate.parse(\"2014-01-01\")));\r\n\r\n// Time is between two limits\r\nassertThat(Instant.parse(\"2015-01-01T00:00:00.00Z\"), TimeMatchers.between(\r\n  Instant.parse(\"2014-01-01T00:00:00.00Z\"),\r\n  Instant.parse(\"2016-01-01T00:00:00.00Z\")\r\n));\r\n\r\n// Duration is longer than another\r\nassertThat(Duration.ofMinutes(4), TimeMatchers.longerThan(Duration.ofSeconds(4)));\r\n\r\n// Duration is shorter than another\r\nassertThat(Duration.ofSeconds(4), TimeMatchers.shorterThan(Duration.ofMinutes(4)));\r\n\r\n// Period matches element-wise\r\nassertThat(Period.of(1, 2, 3), TimeMatchers.matches(equalTo(1), equalTo(2), equalTo(3)));\r\n```","google":"UA-54623334-2","note":"Don't delete this file! It's used internally to help with page regeneration."}